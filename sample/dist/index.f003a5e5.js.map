{"mappings":"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","sources":["dist/three-wheel-menu/src/utils.js","dist/three-wheel-menu/src/index.js"],"sourcesContent":["/**\n * get angle formed by vector(x,y) & vector(1,0)\n * @param {number} x \n * @param {number} y \n * @returns {number} radian (0 ~ 2π)\n */\nexport const getAngle = (x, y) => {\n  if(y === 0) {\n    return x >= 0 ? 0 : Math.PI\n  }\n  const a2 = Math.atan2(y, x)\n  if(a2 > 0 ) {\n    return a2\n  } else {\n    return Math.PI*2 + a2\n  }\n}\n\n/**\n * change rotation to radius\n * @param {number} rot rotation\n * @returns {number} radian\n */\nexport const rotToRad = (rot) => rot * (Math.PI/180)\n","import {rotToRad, getAngle} from './utils'\n\nclass WheelMenu {\n  /**\n   * wheel menu\n   * @param {Three} _THREE Three.js\n   * @param {THREE.Scene} scene THREE.Scene\n   * @param {THREE.PerspectiveCamera} camera THREE.PerspectiveCamera\n   * @param {HTMLCanvasElement} canvas \n   * @param {Oject}  options optional params \n   * @param {Item[]}  options.items optional params \n   * @param {string}  Item.name text as menu item\n   * @param {number}  Item.width item width\n   * @param {number}  Item.height item height\n   * @param {string}  Item.color text color of name\n   * @param {string}  Item.fillStyle item background color\n   * @param {string}  Item.font font of name\n   * @param {string}  Item.fontSize font size of name\n   * @param {number}  Item.padding item paddings\n   * @param {number}  options.radius radius of menu\n   * @param {x: number, y: number, z: number}  options.origin origin of menu\n   * @param {x: number, y: number, z: number}  options.rotation rotation of menu\n   * @param {func}  options.onClick fuction that is executed when click item\n   * @param {func}  options.onMoved fuction that is executed when rotate menu\n   * @param {Item}  options.selected Item that selected at initialization\n   * @param {boolean}  options.isBidirectional flag to decide whether rotation is bidirectional or unidirectional\n   * @param {boolean}  options.isReverse flag to change rotation direction\n   * @param {number}  options.selectedRotation rotation when Item is selected\n   */\n  constructor(\n    _THREE,\n    scene,\n    camera,\n    canvas,\n    {\n      items,\n      radius,\n      origin,\n      rotation,\n      onClick,\n      onMoved,\n      selected,\n      isBidirectional = false,\n      isReverse = false,\n      selectedRotation,\n    }\n  ) {\n    this.scene = scene\n    this.camera = camera\n    this.canvas = canvas\n    if(typeof THREE !== 'undefined') {\n      this.THREE = THREE\n    } else {\n      this.THREE = _THREE\n    }\n\n    this.radius = radius\n    this.wheel = new this.THREE.Object3D() // wrap object\n    this.onClick = onClick\n    this.onMoved = onMoved\n\n    this.items = items // item params\n    this.itemParams = {} // {uuid: item param}\n    this.itemList = [] // three.js objects\n\n    this.nextItem = null\n    this.currentItem = null\n    this.selected = selected ? selected : items[0]\n\n    this.isRotating = false\n    this.isBidirectional = isBidirectional\n    this.isReverse = isReverse\n\n    this.rotationDirection = 1 // rotation direction ±1\n    // vector to point when clicking an item\n    this.selectedVector = Math.abs(rotation.x) > Math.abs(rotation.y)\n      ? new this.THREE.Vector2(0, Math.sign(rotation.x) || -1)\n      : new this.THREE.Vector2(-Math.sign(rotation.y) || -1, 0)\n    this.X_VECTOR = new this.THREE.Vector2(1, 0)\n    this.ITEM_RATIO = 4\n\n    // apply selectedRotation\n    if(selectedRotation) {\n      const frontRad = rotToRad(selectedRotation)\n      const x = this.radius * Math.cos(frontRad)\n      const y = this.radius * Math.sin(frontRad)\n      this.selectedVector = new this.THREE.Vector2(x, y)\n      this.selectedVector.normalize()\n    }\n\n    const itemNum = items.length\n    const deg = 360/itemNum\n\n    // apply rotation & oriin to menu\n    this.wheel.rotation.x = rotation.x\n    this.wheel.rotation.y = rotation.y\n    this.wheel.rotation.z = rotation.z\n    this.wheel.position.x = origin.x\n    this.wheel.position.y = origin.y\n    this.wheel.position.z = origin.z\n\n    let rotateRad = 0\n    for(let i = 0; i < itemNum; i++) {\n      const isCanvas = (items[i] instanceof HTMLElement) && (items[i]?.tagName?.toLowerCase() === 'canvas')\n      const rad = rotToRad(i*deg)\n      // create par item vector\n      const itemVector = new this.THREE.Vector2(\n        radius * Math.cos(rad),\n        radius * Math.sin(rad),\n      )\n\n      const item = isCanvas\n        ? this.getCanvasSplite(items[i])\n        : this.getTextSplite({\n          text: items[i].name,\n          width: items[i].width || 300,\n          height: items[i].height,\n          color: items[i].color || '#000000',\n          fillStyle: items[i].fillStyle || '#ffffff',\n          font: items[i].font || 'Bold sans-serif',\n          fontSize: items[i].size || 20,\n          padding: items[i].padding || 10,\n        })\n\n      item.position.x = itemVector.x\n      item.position.y = itemVector.y\n\n      // rotate to selected item\n      if(\n        this.selected && isCanvas && this.selected.isEqualNode && this.selected.isEqualNode(items[i])\n        || this.selected && !isCanvas && this.selected?.name === items[i].name\n      ) {\n        rotateRad = this.getAngleToSelected(itemVector) * this.getRotationDirection(itemVector)\n        this.currentItem = item\n      }\n\n      this.itemParams[item.uuid] = isCanvas ? items[i] : {...items[i]}\n \n      // add item\n      this.itemList.push(item)\n      this.wheel.add(item)\n    }\n    this.currentItem = this.currentItem || this.itemList[0]\n    this.rotateMenu(rotateRad)\n\n    this.addClickEvent()\n    scene.add(this.wheel)\n \n    // add scroll event\n    canvas.addEventListener('wheel', (e) => {\n      if(Math.abs(e.deltaY) <= 20) return\n      let i = this.itemList.findIndex(item => item.uuid === this.currentItem.uuid)\n      i = (e.deltaY > 0)\n        ? (i-1) < 0 ? this.itemList.length-1 : (i-1)\n        : (i+1) >= this.itemList.length ? 0 : (i+1)\n      this.rotateMenuToSelectedPosition(this.itemList[i])\n    })\n  }\n\n  /**\n   * rotate menu\n   * @param {number} rad \n   */\n  rotateMenu(rad) {\n    this.itemList.forEach((item) => {\n      const {x, y} = item.position\n      const newRad = Math.atan2(y, x) + rad\n\n      const newX = this.radius * Math.cos(newRad)\n      const newY = this.radius * Math.sin(newRad)\n\n      item.position.x = newX\n      item.position.y = newY\n    })\n  }\n\n  /**\n   * rotate menu to selected position\n   * @param {Item} item \n   */\n  rotateMenuToSelectedPosition(item) {\n    this.nextItem = item\n    const vector = new this.THREE.Vector2(item.position.x, item.position.y)\n    vector.normalize()\n    this.rotationDirection = this.getRotationDirection(vector)\n    if(!this.isRotating && this.currentItem.uuid !== this.nextItem.uuid) {\n      this.isRotating = true\n    }\n  }\n\n  /**\n   * get radian between any vector & vector to selected positon\n   * @param {Three.Vector2} vector \n   * @returns {number} radian between any vector & vector to selected positon\n   */\n  getAngleToSelected(vector) {\n    vector.normalize()\n    const frontAngle = getAngle(this.selectedVector.x, this.selectedVector.y)\n    const targetAngle = getAngle(vector.x, vector.y)\n    let rad = Math.abs(frontAngle - targetAngle)\n    rad = rad < 0.1 && rad > 0.01 ? 0 : rad\n    return rad\n  }\n\n  /**\n   * get text size on canvas\n   * @param {string} text \n   * @param {string} font \n   * @returns {width: number, height: number} text width & height\n   */\n  getTextSizeOnCanvas(text, font) {\n    const canvas = document.createElement('canvas')\n    const context = canvas.getContext('2d')\n    context.font = font\n    const {width, actualBoundingBoxAscent, actualBoundingBoxDescent} = context.measureText(text)\n    const height = actualBoundingBoxAscent+actualBoundingBoxDescent\n    return {width, height}\n  }\n\n  /**\n   * get rotation direction to selected position as ±1\n   * @param {*} vector vector of any item \n   * @returns {number} rotation direction\n   */\n  getRotationDirection(vector) {\n    let sign = 1\n    if(!this.isBidirectional) {\n      const frontAngle = getAngle(this.selectedVector.x, this.selectedVector.y)\n      const targetAngle = getAngle(vector.x, vector.y)\n      const subTarget = Math.abs(frontAngle - targetAngle)\n      const subFrom360 = Math.abs(Math.PI*2 - subTarget)\n      if(frontAngle > targetAngle) {\n        sign = subTarget > subFrom360 ? -1 : 1\n      } else if(targetAngle > frontAngle) {\n        sign = subTarget > subFrom360 ? 1 : -1\n      }\n    }\n\n    return this.isReverse ? sign * -1 : sign\n  }\n\n  /**\n   * get Three.Sprite with any string\n   * @param {string} params.text\n   * @param {number} params.width\n   * @param {number} params.height\n   * @param {string} params.color\n   * @param {string} params.fillStyle\n   * @param {string} params.fontStyle\n   * @param {number} params.fontSize\n   * @param {number} params.padding\n   * @returns {Three.Sprite} Three.js Sprite object\n   */\n  getTextSplite({\n    text,\n    width = 0,\n    height = 0,\n    color = '#000',\n    fillStyle = '#fff',\n    fontStyle = 'sans-serif',\n    fontSize = 30,\n    padding = 0,\n  }) {\n    const canvas = document.createElement('canvas')\n    const context = canvas.getContext('2d')\n\n    const {width: w, height: h} = this.getTextSizeOnCanvas(text, `${fontSize*this.ITEM_RATIO}px ${fontStyle}`)\n    canvas.width = (width || w) + padding * 2\n    canvas.height = (height || h) + padding * 2\n\n    context.font = `${fontSize*this.ITEM_RATIO}px ${fontStyle}`\n\n    if(fillStyle) {\n      context.fillStyle = fillStyle\n      context.fillRect(0, 0, width || canvas.width, canvas.height)\n    }\n    context.fillStyle = color\n\n    const textX = (width || canvas.width)/2 - w/2\n    const textY = (height || canvas.height)/2 + h/2\n\n    context.fillText(text, textX, textY)\n\n    const texture = new this.THREE.Texture(canvas) \n    texture.needsUpdate = true\n    const material = new this.THREE.SpriteMaterial({map: texture, transparent:false, sizeAttenuation: true })\n    const sprite = new this.THREE.Sprite(material)\n    sprite.scale.set(canvas.width/this.ITEM_RATIO, canvas.height/this.ITEM_RATIO, 1)\n    return sprite\n  }\n\n  /**\n   * get Three.Sprite with any HTMLCanvasElement\n   * @param {HTMLCanvasElement} canvas\n   * @returns {Three.Sprite} Three.js Sprite object\n   */\n  getCanvasSplite(canvas) {\n    const texture = new this.THREE.Texture(canvas) \n    texture.needsUpdate = true\n\n    const material = new this.THREE.SpriteMaterial({map: texture, transparent:false, sizeAttenuation: true})\n    const sprite = new this.THREE.Sprite(material)\n    sprite.scale.set(canvas.width/this.ITEM_RATIO, canvas.height/this.ITEM_RATIO, 1)\n    return sprite\n  }\n\n  /**\n   * add onClick event to wheel menu\n   */\n  addClickEvent() {\n    // register mouse click event\n    const mouse = new this.THREE.Vector2()\n    const raycaster = new this.THREE.Raycaster()\n\n    const handleMouseClick = (event) => {\n      const element = event.currentTarget\n      const x = event.clientX - element.offsetLeft\n      const y = event.clientY - element.offsetTop\n      const w = element.offsetWidth\n      const h = element.offsetHeight\n      mouse.x = (x / w) * 2 - 1\n      mouse.y = -(y / h) * 2 + 1\n      raycaster.setFromCamera(mouse, this.camera)\n      const intersects = raycaster.intersectObjects(this.wheel.children)\n      if(intersects && intersects.length > 0 && intersects[0]?.object) {\n        const item = intersects[0]?.object\n        if(this.onClick) this.onClick(this.itemParams[item.uuid], item)\n        this.rotateMenuToSelectedPosition(item)\n      }\n    }\n\n    this.canvas.addEventListener('click', handleMouseClick)\n  }\n\n  /**\n   * execute animation\n   */\n  tick() {\n    if(this.isRotating === false) return\n    const angle = this.getAngleToSelected(new this.THREE.Vector2(this.nextItem.position.x, this.nextItem.position.y))\n    if(angle > 0.1) {\n      this.rotateMenu(0.1*this.rotationDirection)\n    } else {\n      this.isRotating = false\n      this.currentItem = this.nextItem\n      if(this.onMoved) this.onMoved(this.itemParams[this.nextItem.uuid], this.nextItem)\n    }\n  }\n\n}\n\nexport default  WheelMenu\nwindow.WheelMenu = WheelMenu\n"],"names":["$8cbaabfe2b5f9da3$var$$e15726cc9f000015$export$b363da9ded343252","x","y","Math","PI","a2","atan2","$8cbaabfe2b5f9da3$var$$e15726cc9f000015$export$e14086d5b9db11ed","rot","$8cbaabfe2b5f9da3$var$$a133e694903d6523$var$WheelMenu","constructor","_THREE","scene","camera","canvas","items","radius","origin","rotation","onClick","onMoved","selected","isBidirectional","isReverse","selectedRotation","this","THREE","wheel","Object3D","itemParams","itemList","nextItem","currentItem","isRotating","rotationDirection","selectedVector","abs","Vector2","sign","X_VECTOR","ITEM_RATIO","frontRad","cos","sin","normalize","itemNum","length","deg","z","position","rotateRad","i1","isCanvas","HTMLElement","tagName","toLowerCase","rad","itemVector","item","getCanvasSplite","getTextSplite","text","name","width","height","color","fillStyle","font","fontSize","size","padding","isEqualNode","getAngleToSelected","getRotationDirection","uuid","push","add","rotateMenu","addClickEvent","addEventListener","e","deltaY","i","findIndex","rotateMenuToSelectedPosition","forEach","newRad","newX","newY","vector","frontAngle","targetAngle","getTextSizeOnCanvas","context","document","createElement","getContext","actualBoundingBoxAscent","actualBoundingBoxDescent","measureText","subTarget","subFrom360","fontStyle","w","h","fillRect","textX","textY","fillText","texture","Texture","needsUpdate","material","SpriteMaterial","map","transparent","sizeAttenuation","sprite","Sprite","scale","set","mouse","raycaster","Raycaster","event","element","currentTarget","clientX","offsetLeft","clientY","offsetTop","offsetWidth","offsetHeight","setFromCamera","intersects","intersectObjects","children","object","tick","$8cbaabfe2b5f9da3$var$$a133e694903d6523$export$2e2bcd8739ae039","window","WheelMenu"],"version":3,"file":"index.f003a5e5.js.map"}